package com.example.attendancenquizsystem.Presenter;

import android.content.Context;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.example.attendancenquizsystem.model.Lecture;
import com.example.attendancenquizsystem.View.TeacherLecturesView;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;

import static androidx.constraintlayout.widget.Constraints.TAG;

public class TeacherLecturesPresenter {
    public TeacherLecturesView view;
    public long attendance;
    public Context cx;
    ArrayList<Lecture>lectures;
    public TeacherLecturesPresenter(TeacherLecturesView v,Context x){
        view=v;
        cx=x;
        lectures=new ArrayList<>();
    }
    public void retrivelectures(String subject){
        FirebaseUser user= FirebaseAuth.getInstance().getCurrentUser();
        String id= user.getUid();
        final DatabaseReference mydatabase= FirebaseDatabase.getInstance().getReference().child("Courses").child(subject);
        mydatabase.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                attendance=dataSnapshot.child("Students").getChildrenCount();
                //Log.d(TAG, "onChildAdded: ");
                mydatabase.child(dataSnapshot.getKey()).child("attendance").setValue(attendance).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {

                    }
                });
                Lecture mylecture=dataSnapshot.getValue(Lecture.class);
                Log.d("mylecture", "onChildAdded: "+mylecture.getNote());
                Log.d("mylecture", "onChildAdded: "+mylecture.getTitle());
                Log.d("test", "onChildAdded: "+dataSnapshot.getValue());
                Log.d("test", "onChildAdded: "+dataSnapshot.getKey()   );
                mylecture.setAttendance(attendance);
                lectures.add(mylecture);
                view.getData(lectures);
            }

            @Override
            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                attendance=dataSnapshot.child("Students").getChildrenCount();
                mydatabase.child(dataSnapshot.getKey()).child("attendance").setValue(attendance).addOnCompleteListener(new OnCompleteListener<Void>() {
                    @Override
                    public void onComplete(@NonNull Task<Void> task) {

                    }
                });
            }

            @Override
            public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) {

            }

            @Override
            public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {

            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
    }
}
